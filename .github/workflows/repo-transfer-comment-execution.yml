name: Repository Transfer PR Execution

on:
  issue_comment:
    types: [created]

# Add permissions to the GITHUB_TOKEN
permissions:
  contents: read
  statuses: write        
  pull-requests: read    # Needed to read PR info
  issues: read          # Needed for issue_comment trigger

jobs:
  execute-transfer:
    name: Repository Transfer PR Execution
    # No condition on github.event_name since this workflow is only triggered by issue_comment events
    # Added explicit condition to check for 'apply transfer' in the comment
    if: ${{ contains(github.event.comment.body, 'apply transfer') }}
    runs-on: ubuntu-latest
    steps:
      - name: Debug Event
        run: |
          echo "Event triggered by: ${{ github.event_name }}"
          echo "Comment author: ${{ github.event.comment.user.login }}"
          echo "Comment: ${{ github.event.comment.body }}"
          echo "Issue/PR number: ${{ github.event.issue.number }}"
          echo "Is PR: ${{ github.event.issue.pull_request != null }}"
      
      - name: Check if comment triggers a transfer
        id: check-comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Only run on PRs, not issues
            const isPR = !!context.payload.issue.pull_request;
            if (!isPR) {
              console.log('This comment is on an issue, not a PR. Skipping.');
              return core.setOutput('should_execute', 'false');
            }
            
            // Check if the comment contains the trigger phrase (case insensitive)
            const comment = context.payload.comment.body.toLowerCase();
            const triggerPhrase = 'apply transfer';
            const shouldExecute = comment.includes(triggerPhrase);
            
            if (!shouldExecute) {
              console.log('Comment does not contain the trigger phrase. Skipping.');
              return core.setOutput('should_execute', 'false');
            }
            
            console.log('Comment contains trigger phrase. Proceeding to check PR approval status.');
            core.setOutput('should_execute', 'true');
            core.setOutput('pr_number', context.payload.issue.number);
      
      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            return {
              sha: pr.data.head.sha,
              ref: pr.data.head.ref
            };

      - name: Set pending status
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ fromJson(steps.pr.outputs.result).sha }}',
              state: 'pending',
              context: 'Repository Transfer PR Execution',
              description: 'Running tests...',
              target_url: runUrl
            });

      - name: Check PR approval status and required status checks
        id: check-approval
        if: steps.check-comment.outputs.should_execute == 'true'
        env:
          PR_NUMBER: ${{ steps.check-comment.outputs.pr_number }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = parseInt(process.env.PR_NUMBER);
            
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            // Get the reviews
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            // Check if there's at least one approval
            const hasApproval = reviews.some(review => review.state === 'APPROVED');
            
            if (!hasApproval) {
              console.log('PR does not have any approvals. Skipping transfer execution.');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: '⚠️ **Transfer Execution Blocked**\n\nThis PR needs at least one approval before transfers can be executed. Please request a review and try again after approval.'
              });
              return core.setOutput('can_execute', 'false');
            }
            
            // Check if all required status checks have passed
            const { data: combinedStatus } = await github.rest.repos.getCombinedStatusForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });
            
            // Get required checks from branch protection rules
            const { data: branchProtection } = await github.rest.repos.getBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: pr.base.ref
            }).catch(err => {
              console.log(`No branch protection found for ${pr.base.ref}: ${err.message}`);
              return { data: { required_status_checks: { contexts: [] } } };
            });
            
            const requiredChecks = branchProtection.required_status_checks?.contexts || [];
            
            // The name of the current workflow check
            const currentWorkflowCheck = 'Repository Transfer PR Execution';
            
            // Check if all required checks have passed
            let allRequiredChecksPassed = true;
            let failedChecks = [];
            
            if (requiredChecks.length > 0) {
              // Filter out the current workflow from required checks to avoid circular dependency
              const filteredRequiredChecks = requiredChecks.filter(check => 
                check !== currentWorkflowCheck
              );
              
              console.log(`Required checks (excluding current workflow): ${JSON.stringify(filteredRequiredChecks)}`);
              
              // Filter the statuses to only include the required ones (excluding this workflow)
              const requiredStatuses = combinedStatus.statuses.filter(status => 
                filteredRequiredChecks.includes(status.context)
              );
              
              // Check if any required status failed or is pending
              for (const check of filteredRequiredChecks) {
                const status = combinedStatus.statuses.find(s => s.context === check);
                if (!status || status.state !== 'success') {
                  allRequiredChecksPassed = false;
                  failedChecks.push(check);
                }
              }
            } else {
              // If there are no required checks defined, use the combined status but exclude this workflow
              const relevantStatuses = combinedStatus.statuses.filter(s => 
                s.context !== currentWorkflowCheck
              );
              
              allRequiredChecksPassed = relevantStatuses.every(s => s.state === 'success');
              
              if (!allRequiredChecksPassed) {
                failedChecks = relevantStatuses
                  .filter(s => s.state !== 'success')
                  .map(s => s.context);
              }
            }
            
            if (!allRequiredChecksPassed) {
              console.log('Not all required status checks have passed. Skipping transfer execution.');
              const failedChecksText = failedChecks.length > 0 
                ? `\n\nFailed or pending checks:\n${failedChecks.map(c => `- ${c}`).join('\n')}`
                : '';
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `⚠️ **Transfer Execution Blocked**\n\nAll required status checks must pass before transfers can be executed. Please fix the failing checks and try again.${failedChecksText}`
              });
              return core.setOutput('can_execute', 'false');
            }
            
            console.log('PR has approvals and all required status checks have passed. Proceeding with transfer execution.');
            core.setOutput('can_execute', 'true');
            core.setOutput('branch_name', pr.head.ref);
            
      - name: Checkout code
        if: steps.check-approval.outputs.can_execute == 'true'
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.check-approval.outputs.branch_name }}
          
      - name: Set up Python
        if: steps.check-approval.outputs.can_execute == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        if: steps.check-approval.outputs.can_execute == 'true'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
          # Ensure log directories exist
          mkdir -p logs
          
      - name: Execute repository transfers
        if: steps.check-approval.outputs.can_execute == 'true'
        id: execute-transfers
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
          PR_NUMBER: ${{ steps.check-comment.outputs.pr_number }}
        run: |
          echo "🚀 EXECUTING ACTUAL REPOSITORY TRANSFERS"
          echo "Transfer initiated by comment on PR #${PR_NUMBER}"
          
          # Run the transfer and capture exit code
          python repo_transfer.py --csv transfer_repos.csv --auto-approve --verbose || TRANSFER_EXIT_CODE=$?
          
          # Check if the command succeeded
          if [ -n "$TRANSFER_EXIT_CODE" ] && [ $TRANSFER_EXIT_CODE -ne 0 ]; then
            echo "::error::Transfer execution failed with exit code $TRANSFER_EXIT_CODE"
            echo "transfer_success=false" >> $GITHUB_OUTPUT
          else
            echo "Transfer execution completed successfully"
            echo "transfer_success=true" >> $GITHUB_OUTPUT
          fi
          
          # Find the latest transfer log
          LATEST_LOG=$(ls -t logs/repo_transfer_*.log | grep -v "dry_run" | head -1 || echo "No log file found")
          echo "Latest log file: $LATEST_LOG"
          
          if [ -f "$LATEST_LOG" ]; then
            # Use our improved log parser to generate a detailed report in real_run mode
            echo "Generating transfer results using log parser..."
            python helpers/parse_transfer_logs.py --mode real_run --log-file "$LATEST_LOG" --output-file transfer_results.md
            
            # Check if parser results were generated
            if [ -f "validation_results.md" ]; then
                echo "Validation results generated successfully."
                cat validation_results.md
            else
                echo "::warning::Failed to generate validation results. Creating empty validation results."
                echo "::warning::Generated transfer results file is empty. Creating a basic report."
                echo "## Repository Transfer Results" > transfer_results.md
                echo "" >> transfer_results.md
                echo "⚠️ No detailed transfer data could be extracted." >> transfer_results.md
                echo "Please check the workflow logs for more details." >> transfer_results.md
            fi
            
            cat transfer_results.md
          else
            echo "::warning::No log file found to analyze."
            echo "## Repository Transfer Results" > transfer_results.md
            echo "" >> transfer_results.md
            echo "⚠️ No transfer data available. The transfer process may have failed to generate logs." >> transfer_results.md
            echo "" >> transfer_results.md
            echo "Please check the workflow logs for more details." >> transfer_results.md
          fi
          
      - name: Upload execution logs
        if: steps.check-approval.outputs.can_execute == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: transfer-execution-logs
          path: logs/repo_transfer_*.log
          retention-days: 30
          
      - name: Report transfer results
        id: report-results
        if: steps.check-approval.outputs.can_execute == 'true'
        env:
          PR_NUMBER: ${{ steps.check-comment.outputs.pr_number }}
          TRANSFER_SUCCESS: ${{ steps.execute-transfers.outputs.transfer_success }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const prNumber = parseInt(process.env.PR_NUMBER);
            
            let transferResults = '';
            if (fs.existsSync('transfer_results.md')) {
              transferResults = fs.readFileSync('transfer_results.md', 'utf8');
            } else {
              transferResults = '❌ Error: Transfer results file not found. Check workflow logs for details.';
            }
            
            const isSuccess = process.env.TRANSFER_SUCCESS === 'true';
            core.setOutput('isSuccess', isSuccess);
            const statusBadge = isSuccess 
              ? '![Transfer Status](https://img.shields.io/badge/Transfer-Completed-brightgreen)'
              : '![Transfer Status](https://img.shields.io/badge/Transfer-Failed-red)';
            
            const commentBody = '# Repository Transfer Execution\n\n' +
              statusBadge + '\n\n' +
              transferResults + '\n\n' +
              '## Execution Details\n' +
              '- Requested by: @' + context.payload.comment.user.login + '\n' +
              '- Execution time: ' + new Date().toISOString() + '\n\n' +
              'For complete details, check the workflow logs and attached artifacts.';
            
            try {
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              console.log('PR comment with transfer results created successfully');
            } catch (error) {
              console.error('Failed to create PR comment:', error);
              core.warning(`Failed to create PR comment: ${error.message}`);
            }

      - name: Report success
        if: success() && steps.report-results.outputs.isSuccess == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ fromJson(steps.pr.outputs.result).sha }}',
              state: 'success',
              context: 'Repository Transfer PR Execution',
              description: 'Tests passed',
              target_url: runUrl
            });

      - name: Report failure
        if: failure() || steps.report-results.outputs.isSuccess == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ fromJson(steps.pr.outputs.result).sha }}',
              state: 'failure',
              context: 'Repository Transfer PR Execution',
              description: 'Tests failed',
              target_url: runUrl
            });
