name: Repository Transfer PR Execution

on:
  issue_comment:
    types: [created]

# Add permissions to the GITHUB_TOKEN
permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  execute-transfer:
    name: Repository Transfer PR Execution
    # No condition on github.event_name since this workflow is only triggered by issue_comment events
    # Added explicit condition to check for 'apply transfer' in the comment
    if: ${{ contains(github.event.comment.body, 'apply transfer') }}
    runs-on: ubuntu-latest
    steps:
      - name: Debug Event
        run: |
          echo "Event triggered by: ${{ github.event_name }}"
          echo "Comment author: ${{ github.event.comment.user.login }}"
          echo "Comment: ${{ github.event.comment.body }}"
          echo "Issue/PR number: ${{ github.event.issue.number }}"
          echo "Is PR: ${{ github.event.issue.pull_request != null }}"
      
      - name: Check if comment triggers a transfer
        id: check-comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Only run on PRs, not issues
            const isPR = !!context.payload.issue.pull_request;
            if (!isPR) {
              console.log('This comment is on an issue, not a PR. Skipping.');
              return core.setOutput('should_execute', 'false');
            }
            
            // Check if the comment contains the trigger phrase (case insensitive)
            const comment = context.payload.comment.body.toLowerCase();
            const triggerPhrase = 'apply transfer';
            const shouldExecute = comment.includes(triggerPhrase);
            
            if (!shouldExecute) {
              console.log('Comment does not contain the trigger phrase. Skipping.');
              return core.setOutput('should_execute', 'false');
            }
            
            console.log('Comment contains trigger phrase. Proceeding to check PR approval status.');
            core.setOutput('should_execute', 'true');
            core.setOutput('pr_number', context.payload.issue.number);
            
      - name: Check PR approval status
        id: check-approval
        if: steps.check-comment.outputs.should_execute == 'true'
        env:
          PR_NUMBER: ${{ steps.check-comment.outputs.pr_number }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = parseInt(process.env.PR_NUMBER);
            
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            // Get the reviews
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            // Check if there's at least one approval
            const hasApproval = reviews.some(review => review.state === 'APPROVED');
            
            if (!hasApproval) {
              console.log('PR does not have any approvals. Skipping transfer execution.');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: '⚠️ **Transfer Execution Blocked**\n\nThis PR needs at least one approval before transfers can be executed. Please request a review and try again after approval.'
              });
              return core.setOutput('can_execute', 'false');
            }
            
            console.log('PR has at least one approval. Proceeding with transfer execution.');
            core.setOutput('can_execute', 'true');
            core.setOutput('branch_name', pr.head.ref);
            
      - name: Checkout code
        if: steps.check-approval.outputs.can_execute == 'true'
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.check-approval.outputs.branch_name }}
          
      - name: Set up Python
        if: steps.check-approval.outputs.can_execute == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        if: steps.check-approval.outputs.can_execute == 'true'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
          # Ensure log directories exist
          mkdir -p logs
          
      - name: Execute repository transfers
        if: steps.check-approval.outputs.can_execute == 'true'
        id: execute-transfers
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
          PR_NUMBER: ${{ steps.check-comment.outputs.pr_number }}
        run: |
          echo "🚀 EXECUTING ACTUAL REPOSITORY TRANSFERS"
          echo "Transfer initiated by comment on PR #${PR_NUMBER}"
          
          # Run the transfer and capture exit code
          python repo_transfer.py --csv transfer_repos.csv --auto-approve --verbose || TRANSFER_EXIT_CODE=$?
          
          # Check if the command succeeded
          if [ -n "$TRANSFER_EXIT_CODE" ] && [ $TRANSFER_EXIT_CODE -ne 0 ]; then
            echo "::error::Transfer execution failed with exit code $TRANSFER_EXIT_CODE"
            echo "transfer_success=false" >> $GITHUB_OUTPUT
          else
            echo "Transfer execution completed successfully"
            echo "transfer_success=true" >> $GITHUB_OUTPUT
          fi
          
          # Find the latest transfer log
          LATEST_LOG=$(ls -t logs/repo_transfer_*.log | grep -v "dry_run" | head -1 || echo "No log file found")
          echo "Latest log file: $LATEST_LOG"
          
          if [ -f "$LATEST_LOG" ]; then
            # Use our improved log parser to generate a detailed report in real_run mode
            echo "Generating transfer results using log parser..."
            python helpers/parse_transfer_logs.py --mode real_run --log-file "$LATEST_LOG" --output-file transfer_results.md
            
            # Check if the parser succeeded
            if [ $? -ne 0 ]; then
              echo "::warning::Failed to parse log file with the parser script. Falling back to basic analysis."
              # Create a basic summary as fallback
              echo "## Repository Transfer Results" > transfer_results.md
              echo "" >> transfer_results.md
              echo "### Transfer Summary" >> transfer_results.md
              echo "" >> transfer_results.md
              echo "| Source | Destination | Status |" >> transfer_results.md
              echo "| ------ | ----------- | ------ |" >> transfer_results.md
              
              # Extract successful transfers
              grep -E "Transfer completed" $LATEST_LOG | grep -v "DEBUG" | grep -E -o "([a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+) → ([a-zA-Z0-9_-]+)" | sed -E 's/([^ ]+) → ([^ ]+)/| \1 | \2 | ✅ Success |/g' >> transfer_results.md || echo "| | | No successful transfers found |" >> transfer_results.md
              
              # Extract failed transfers
              grep -E "Transfer failed" $LATEST_LOG | grep -v "DEBUG" | grep -E -o "([a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+) → ([a-zA-Z0-9_-]+)" | sed -E 's/([^ ]+) → ([^ ]+)/| \1 | \2 | ❌ Failed |/g' >> transfer_results.md || echo "No failed transfers found" > /dev/null
              
              # Extract skipped transfers
              grep -E "Transfer skipped" $LATEST_LOG | grep -v "DEBUG" | grep -E -o "([a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+) → ([a-zA-Z0-9_-]+)" | sed -E 's/([^ ]+) → ([^ ]+)/| \1 | \2 | ⚠️ Skipped |/g' >> transfer_results.md || echo "No skipped transfers found" > /dev/null
            fi
            
            if [ -n "$TRANSFER_EXIT_CODE" ] && [ $TRANSFER_EXIT_CODE -ne 0 ]; then
              echo "### ⚠️ Warning" >> transfer_results.md
              echo "" >> transfer_results.md
              echo "The transfer process exited with code $TRANSFER_EXIT_CODE. Some transfers may not have completed." >> transfer_results.md
              echo "Please check the workflow logs for more details." >> transfer_results.md
              echo "" >> transfer_results.md
            fi
            
            # Verify that the output file has content
            if [ ! -s transfer_results.md ]; then
              echo "::warning::Generated transfer results file is empty. Creating a basic report."
              echo "## Repository Transfer Results" > transfer_results.md
              echo "" >> transfer_results.md
              echo "⚠️ No detailed transfer data could be extracted." >> transfer_results.md
              echo "Please check the workflow logs for more details." >> transfer_results.md
            fi
            
            cat transfer_results.md
          else
            echo "::warning::No log file found to analyze."
            echo "## Repository Transfer Results" > transfer_results.md
            echo "" >> transfer_results.md
            echo "⚠️ No transfer data available. The transfer process may have failed to generate logs." >> transfer_results.md
            echo "" >> transfer_results.md
            echo "Please check the workflow logs for more details." >> transfer_results.md
          fi
          
      - name: Upload execution logs
        if: steps.check-approval.outputs.can_execute == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: transfer-execution-logs
          path: logs/repo_transfer_*.log
          retention-days: 30
          
      - name: Report transfer results
        if: steps.check-approval.outputs.can_execute == 'true'
        env:
          PR_NUMBER: ${{ steps.check-comment.outputs.pr_number }}
          TRANSFER_SUCCESS: ${{ steps.execute-transfers.outputs.transfer_success }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const prNumber = parseInt(process.env.PR_NUMBER);
            
            let transferResults = '';
            if (fs.existsSync('transfer_results.md')) {
              transferResults = fs.readFileSync('transfer_results.md', 'utf8');
            } else {
              transferResults = '❌ Error: Transfer results file not found. Check workflow logs for details.';
            }
            
            const isSuccess = process.env.TRANSFER_SUCCESS === 'true';
            const statusBadge = isSuccess 
              ? '![Transfer Status](https://img.shields.io/badge/Transfer-Completed-brightgreen)'
              : '![Transfer Status](https://img.shields.io/badge/Transfer-Failed-red)';
            
            const commentBody = '# Repository Transfer Execution\n\n' +
              statusBadge + '\n\n' +
              transferResults + '\n\n' +
              '## Execution Details\n' +
              '- Requested by: @' + context.payload.comment.user.login + '\n' +
              '- Execution time: ' + new Date().toISOString() + '\n\n' +
              'For complete details, check the workflow logs and attached artifacts.';
            
            try {
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              console.log('PR comment with transfer results created successfully');
            } catch (error) {
              console.error('Failed to create PR comment:', error);
              core.warning(`Failed to create PR comment: ${error.message}`);
            }
