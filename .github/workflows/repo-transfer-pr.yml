name: Repository Transfer PR Validation

on:
  pull_request:
    branches: [main]
    paths:
      - 'transfer_repos.csv'
    types: [opened, synchronize, reopened]

# Add permissions to the GITHUB_TOKEN
permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  test:
    name: Run Tests and Validate Transfers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Configure environment variables
        env:
          GITHUB_TOKEN_ADMIN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          # Export variables for tests
          echo "export GITHUB_TOKEN=${GITHUB_TOKEN_ADMIN}" > .env

      - name: Check for changes in transfer_repos.csv
        id: csv-changes
        run: |
          # Skip duplicate runs by checking if CSV has real changes
          if [ "${{ github.event_name }}" == "pull_request" ] || [ "${{ github.event_name }}" == "pull_request_target" ]; then
            # Get the base SHA
            BASE_SHA=$(git merge-base origin/${{ github.base_ref }} HEAD)
            echo "Base SHA: $BASE_SHA"
            
            # Check if transfer_repos.csv has changed
            if git diff --name-only $BASE_SHA HEAD | grep -q "transfer_repos.csv"; then
              # Check if the changes are substantial (more than just whitespace)
              DIFF_COUNT=$(git diff --word-diff=porcelain $BASE_SHA HEAD -- transfer_repos.csv | grep -E "^(\+|-)[^+-]" | wc -l)
              
              if [ $DIFF_COUNT -gt 0 ]; then
                echo "Substantial changes detected in transfer_repos.csv ($DIFF_COUNT lines changed)"
                echo "changed=true" >> $GITHUB_OUTPUT
              else
                echo "Only whitespace changes detected in transfer_repos.csv, skipping validation"
                echo "changed=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "No changes detected in transfer_repos.csv"
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Not a pull request event, assuming changes are needed"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Validate csv file format
        if: steps.csv-changes.outputs.changed == 'true'
        run: |
          echo "Validating transfer_repos.csv format..."
          # Install required dependencies for validation script
          pip install requests
          
          # Run the comprehensive CSV format validation
          python helpers/validate_csv.py --csv transfer_repos.csv --format-only
          
          # Script will exit with code 1 if validation fails, which will fail the job automatically
          echo "CSV format validation completed successfully."

    #   - name: Upload CSV validation results
    #     if: steps.csv-changes.outputs.changed == 'true'
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: csv-validation
    #       path: csv_validation.md
    #       retention-days: 1

      - name: Run unit tests
        id: unit-tests
        continue-on-error: true  # Don't fail the workflow if tests fail
        run: |
            chmod +x run_tests.sh
            ./run_tests.sh || TEST_EXIT_CODE=$?
            
            if [ -n "$TEST_EXIT_CODE" ] && [ $TEST_EXIT_CODE -ne 0 ]; then
              echo "::warning::Tests failed with exit code $TEST_EXIT_CODE"
              echo "test_failed=true" >> $GITHUB_OUTPUT
            else
              echo "test_failed=false" >> $GITHUB_OUTPUT
            fi
            
      - name: Fail job if tests failed
        if: steps.unit-tests.outputs.test_failed == 'true'
        run: |
          echo "::error::Unit tests failed. Marking job as failed."
          exit 1

    #   - name: Run integration tests
    #     run: |
    #       ./run_tests.sh -i
  
  dry-run:
    name: Dry Run Repository Transfer
    needs: test
    if: needs.test.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Download CSV validation
        uses: actions/download-artifact@v4
        with:
          name: csv-validation
          path: .
        continue-on-error: true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run dry-run with CSV input
        id: dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          # Trigger dry-run and save exit code
          python repo_transfer.py --csv transfer_repos.csv --dry-run --auto-approve --verbose || DRY_RUN_EXIT_CODE=$?
          
          # Check if the command succeeded
          if [ -n "$DRY_RUN_EXIT_CODE" ] && [ $DRY_RUN_EXIT_CODE -ne 0 ]; then
            echo "::warning::Dry run exited with code $DRY_RUN_EXIT_CODE. Continuing to analyze available logs."
            echo "dry_run_failed=true" >> $GITHUB_OUTPUT
          else
            echo "Dry run completed successfully."
            echo "dry_run_failed=false" >> $GITHUB_OUTPUT
          fi
          
          # Make the helpers directory executable
          chmod +x helpers/parse_transfer_logs.py
          
          # Run the log parsing script to generate detailed validation results
          python helpers/parse_transfer_logs.py
          
          # Check if validation results were generated
          if [ -f "validation_results.md" ]; then
            echo "Validation results generated successfully."
            cat validation_results.md
            
            # Check if the validation results contain errors
            if grep -q -E "error|Error|❌|⚠️|\bfailed\b|\bFailed\b" validation_results.md; then
              echo "::error::Validation found issues with repository transfers."
              echo "validation_has_errors=true" >> $GITHUB_OUTPUT
            else
              echo "Validation passed with no issues."
              echo "validation_has_errors=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "::error::Failed to generate validation results."
            echo "validation_has_errors=true" >> $GITHUB_OUTPUT
            echo "## Repository Transfer Validation Results" > validation_results.md
            echo "" >> validation_results.md
            echo "❌ No validation data available. The dry run may have failed to generate logs." >> validation_results.md
            echo "" >> validation_results.md
            echo "Please check the workflow logs for more details." >> validation_results.md
          fi

      - name: Check validation status
        if: steps.dry-run.outputs.validation_has_errors == 'true'
        run: |
          echo "::error::Validation found issues with repository transfers. See validation_results.md for details."
          exit 1

      - name: Upload validation results
        uses: actions/upload-artifact@v4
        with:
          name: validation-results
          path: validation_results.md
          retention-days: 1

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: repo-transfer-logs
          path: logs/repo_transfer_*_dry_run.log
          retention-days: 7

  comment:
    name: Create PR Comment
    # This job will run even if previous jobs fail
    if: always() && github.event_name == 'pull_request'
    needs: [test, dry-run]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            return {
              sha: pr.data.head.sha,
              ref: pr.data.head.ref
            };
      
      - name: Download transfer summary
        uses: actions/download-artifact@v4
        with:
          name: transfer-summary
          path: .
        continue-on-error: true

      - name: Download validation results
        uses: actions/download-artifact@v4
        with:
          name: validation-results
          path: .
        continue-on-error: true
        
      - name: Download CSV validation
        uses: actions/download-artifact@v4
        with:
          name: csv-validation
          path: .
        continue-on-error: true
          
      - name: Create PR Comment with Results
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Check for file existence and log status
            console.log('Checking for required files:');
            
            // Get job status information first
            const testJobStatus = '${{ needs.test.result }}';
            const dryRunStatus = '${{ needs.dry-run.result }}';
            
            let transferSummary = '';
            if (fs.existsSync('transfer_summary.md')) {
              console.log('✓ Found transfer_summary.md');
              transferSummary = fs.readFileSync('transfer_summary.md', 'utf8');
            } else {
              console.log('✗ transfer_summary.md not found');
              transferSummary = '❌ Error: Transfer summary file not found. This may be due to no changes in transfer_repos.csv.';
            }
            
            let validationResults = '';
            if (testJobStatus !== 'success') {
              validationResults = '### ❌ Validation Skipped\n\n' +
                'Repository validation was skipped because the test job failed.\n' +
                'Please check the workflow logs and fix the tests before proceeding.\n';
            } else if (fs.existsSync('validation_results.md')) {
              console.log('✓ Found validation_results.md');
              validationResults = fs.readFileSync('validation_results.md', 'utf8');
            } else {
              console.log('✗ validation_results.md not found');
              validationResults = '❌ Error: Validation results file not found. Check workflow logs for details.';
            }
            
            let csvValidation = '';
            if (fs.existsSync('csv_validation.md')) {
              console.log('✓ Found csv_validation.md');
              csvValidation = fs.readFileSync('csv_validation.md', 'utf8');
            } else {
              console.log('✗ csv_validation.md not found');
              csvValidation = '❌ Error: CSV validation file not found.';
            }
            
            // Check for any error patterns in the results
            const hasErrors = 
              validationResults.includes('error') || 
              validationResults.includes('Error') || 
              validationResults.includes('❌') ||
              validationResults.includes('⚠️');
            
            const statusBadge = hasErrors 
              ? '![Validation Status](https://img.shields.io/badge/Transfer-Failed-red)'
              : '![Validation Status](https://img.shields.io/badge/Validation-Passed-brightgreen)';
            
            // Create job status info
            let jobsStatus = '';
            if (testJobStatus !== 'success') {
              jobsStatus = '\n\n⚠️ **Job Status**:\n';
              jobsStatus += `- Test job: ${testJobStatus === 'failure' ? '❌ Failed' : '⚠️ ' + testJobStatus}\n`;
              jobsStatus += `- Dry run job: ⏭️ Skipped (depends on test job)\n`;
              jobsStatus += '\nValidation steps were skipped due to test failures. Please fix the tests before proceeding.';
            } else if (dryRunStatus !== 'success') {
              jobsStatus = '\n\n⚠️ **Job Status**:\n';
              jobsStatus += `- Test job: ✅ Success\n`;
              jobsStatus += `- Dry run job: ${dryRunStatus === 'failure' ? '❌ Failed' : '⚠️ ' + dryRunStatus}\n`;
              jobsStatus += '\nSome validation steps may have been skipped. Review logs for more details.';
            }
            
            const commentBody = '# Repository Transfer Validation\n\n' +
              statusBadge + '\n\n' +
              '## Summary\n' +
              'This PR includes repository transfers that have been validated with a dry-run.' + 
              jobsStatus + '\n\n' +
              validationResults + '\n\n' +
              '## Next Steps\n' +
              '1. Review the validation results and dry-run logs\n' +
              '2. If everything looks correct, request reviewer for an approval\n' +
              '3. To execute the transfers, comment "apply transfer" on this PR (requires approval and all check passed)\n\n' +
              'For more details, check the workflow logs and attached artifacts.';
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              console.log('PR comment created successfully');
            } catch (error) {
              console.error('Failed to create PR comment:', error);
              // Don't fail the workflow, but log the error
              core.warning(`Failed to create PR comment: ${error.message}`);
            }
            
      - name: Set PR status
        uses: actions/github-script@v7
        with:
          script: |
            const testJobStatus = '${{ needs.test.result }}';
            const dryRunStatus = '${{ needs.dry-run.result }}';
            let state = 'success';
            let description = 'Validation passed';
            
            if (testJobStatus !== 'success') {
              state = 'failure';
              description = 'Tests failed';
            } else if (dryRunStatus !== 'success' && dryRunStatus !== 'skipped') {
              state = 'failure';
              description = 'Validation failed';
            }
            
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ fromJson(steps.pr.outputs.result).sha }}',
              state: state,
              context: 'Repository Transfer PR Validation',
              description: description,
              target_url: runUrl
            });
