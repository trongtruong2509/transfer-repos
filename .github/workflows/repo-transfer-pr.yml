name: Repository Transfer PR Validation

on:
  pull_request:
    branches: [main]
    paths:
      - 'transfer_repos.csv'
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

# Add permissions to the GITHUB_TOKEN
permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  test:
    name: Run Tests and Validate Transfers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Configure environment variables
        env:
          GITHUB_TOKEN_ADMIN: ${{ secrets.ADMIN_TOKEN }}
        #   GITHUB_TOKEN_MEMBER: ${{ secrets.GITHUB_TOKEN_MEMBER }}
        #   GITHUB_TOKEN_READONLY: ${{ secrets.GITHUB_TOKEN_READONLY }}
        #   GITHUB_TOKEN_ORG1: ${{ secrets.GITHUB_TOKEN_ORG1 }}
        #   GITHUB_TOKEN_ORG2: ${{ secrets.GITHUB_TOKEN_ORG2 }}
        #   TEST_ORG_1: ${{ vars.TEST_ORG_1 }}
        #   TEST_ORG_2: ${{ vars.TEST_ORG_2 }}
        #   TEST_USER: ${{ vars.TEST_USER }}
        #   TEST_REPO_SUFFIX: ${{ vars.TEST_REPO_SUFFIX || format('{0}', github.run_id) }}
        #   TEST_REPO: ${{ vars.TEST_REPO || format('test-public-org1-{0}', github.run_id) }}
        run: |
          # Export variables for tests
          echo "export GITHUB_TOKEN=${GITHUB_TOKEN_ADMIN}" > .env
        #   echo "TEST_ORG_1=${TEST_ORG_1}" >> $GITHUB_ENV
        #   echo "TEST_ORG_2=${TEST_ORG_2}" >> $GITHUB_ENV
        #   echo "TEST_USER=${TEST_USER}" >> $GITHUB_ENV
        #   echo "TEST_REPO_SUFFIX=${TEST_REPO_SUFFIX}" >> $GITHUB_ENV
        #   echo "TEST_REPO=${TEST_REPO}" >> $GITHUB_ENV
          
          # Generate a temporary .env file for testing
        #   echo "export GITHUB_TOKEN_ADMIN=${GITHUB_TOKEN_ADMIN}" >> .env
        #   echo "export GITHUB_TOKEN_MEMBER=${GITHUB_TOKEN_MEMBER}" >> .env
        #   echo "export GITHUB_TOKEN_READONLY=${GITHUB_TOKEN_READONLY}" >> .env
        #   echo "export GITHUB_TOKEN_ORG1=${GITHUB_TOKEN_ORG1}" >> .env
        #   echo "export GITHUB_TOKEN_ORG2=${GITHUB_TOKEN_ORG2}" >> .env
        #   echo "TEST_ORG_1=${TEST_ORG_1}" >> .env
        #   echo "TEST_ORG_2=${TEST_ORG_2}" >> .env
        #   echo "TEST_USER=${TEST_USER}" >> .env
        #   echo "TEST_REPO_SUFFIX=${TEST_REPO_SUFFIX}" >> .env
        #   echo "TEST_REPO=${TEST_REPO}" >> .env

      - name: Check for changes in transfer_repos.csv
        id: csv-changes
        run: |
          # Skip duplicate runs by checking if CSV has real changes
          if [ "${{ github.event_name }}" == "pull_request" ] || [ "${{ github.event_name }}" == "pull_request_target" ]; then
            # Get the base SHA
            BASE_SHA=$(git merge-base origin/${{ github.base_ref }} HEAD)
            echo "Base SHA: $BASE_SHA"
            
            # Check if transfer_repos.csv has changed
            if git diff --name-only $BASE_SHA HEAD | grep -q "transfer_repos.csv"; then
              # Check if the changes are substantial (more than just whitespace)
              DIFF_COUNT=$(git diff --word-diff=porcelain $BASE_SHA HEAD -- transfer_repos.csv | grep -E "^(\+|-)[^+-]" | wc -l)
              
              if [ $DIFF_COUNT -gt 0 ]; then
                echo "Substantial changes detected in transfer_repos.csv ($DIFF_COUNT lines changed)"
                echo "changed=true" >> $GITHUB_OUTPUT
              else
                echo "Only whitespace changes detected in transfer_repos.csv, skipping validation"
                echo "changed=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "No changes detected in transfer_repos.csv"
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Not a pull request event, assuming changes are needed"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Run unit tests
        id: unit-tests
        continue-on-error: true  # Don't fail the workflow if tests fail
        run: |
            chmod +x run_tests.sh
            ./run_tests.sh || TEST_EXIT_CODE=$?
            
            if [ -n "$TEST_EXIT_CODE" ] && [ $TEST_EXIT_CODE -ne 0 ]; then
              echo "::warning::Tests failed with exit code $TEST_EXIT_CODE"
              echo "test_failed=true" >> $GITHUB_OUTPUT
            else
              echo "test_failed=false" >> $GITHUB_OUTPUT
            fi

    #   - name: Run integration tests
    #     run: |
    #       ./run_tests.sh -i

      - name: Analyze CSV changes
        if: steps.csv-changes.outputs.changed == 'true'
        run: |
          echo "Changes detected in transfer_repos.csv"
          echo "Analyzing changes:"
          
          # Show a diff of the changes for PR comment
          git diff --unified=0 origin/${{ github.base_ref }} origin/${{ github.head_ref }} -- transfer_repos.csv > csv_diff.txt
          
          # Count number of repositories to be transferred
          REPO_COUNT=$(grep -v "^source_org" transfer_repos.csv | grep -v "^$" | wc -l)
          echo "Number of repositories to be transferred: $REPO_COUNT"
          echo "REPO_COUNT=$REPO_COUNT" >> $GITHUB_ENV
          
          # Create summary of changes
          echo "## Repository Transfer Changes" > transfer_summary.md
          echo "" >> transfer_summary.md
          echo "This PR includes the following repository transfers:" >> transfer_summary.md
          echo "" >> transfer_summary.md
          echo "| Source Org | Repository | Destination Org |" >> transfer_summary.md
          echo "| ---------- | ---------- | --------------- |" >> transfer_summary.md
          grep -v "^source_org" transfer_repos.csv | grep -v "^$" | awk -F, '{ print "| " $1 " | " $2 " | " $3 " |" }' >> transfer_summary.md
          
          cat transfer_summary.md
          
      - name: Upload transfer summary
        if: steps.csv-changes.outputs.changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: transfer-summary
          path: transfer_summary.md
          retention-days: 1
      
      - name: Validate CSV and Repository Existence
        if: steps.csv-changes.outputs.changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          echo "Running CSV validation to check format and repository existence..."
          python validate_csv.py --csv transfer_repos.csv
          
          # Save validation output for PR comment
          echo "## CSV Validation Results" > csv_validation.md
          echo "" >> csv_validation.md
          echo "✓ All repositories in the CSV file exist and are ready for transfer." >> csv_validation.md

      - name: Upload CSV validation results
        if: steps.csv-changes.outputs.changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: csv-validation
          path: csv_validation.md
          retention-days: 1

  dry-run:
    name: Dry Run Repository Transfer
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Download transfer summary
        uses: actions/download-artifact@v4
        with:
          name: transfer-summary
          path: .
        continue-on-error: true

      - name: Download CSV validation
        uses: actions/download-artifact@v4
        with:
          name: csv-validation
          path: .
        continue-on-error: true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run dry-run with CSV input
        id: dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          # Trigger dry-run and save exit code
          python repo_transfer.py --csv transfer_repos.csv --dry-run --auto-approve --verbose || DRY_RUN_EXIT_CODE=$?
          
          # Check if the command succeeded
          if [ -n "$DRY_RUN_EXIT_CODE" ] && [ $DRY_RUN_EXIT_CODE -ne 0 ]; then
            echo "::warning::Dry run exited with code $DRY_RUN_EXIT_CODE. Continuing to analyze available logs."
          else
            echo "Dry run completed successfully."
          fi
          
          # Extract key information from logs for PR comment
          LATEST_LOG=$(ls -t logs/repo_transfer_*_dry_run.log | head -1 || echo "No log file found")
          echo "Latest log file: $LATEST_LOG"
          
          # Ensure log file exists before proceeding
          if [ -f "$LATEST_LOG" ]; then
            # Create a summary file
            # Add comprehensive transfer summary
            echo "### Transfer Summary" >> validation_results.md
            echo "" >> validation_results.md
            echo "The following repositories would be transferred:" >> validation_results.md
            echo "" >> validation_results.md
            echo "| Source | Destination | Validation |" >> validation_results.md
            echo "| ------ | ----------- | ---------- |" >> validation_results.md
            
            # Extract successful transfers
            grep -E "Would transfer repository" $LATEST_LOG | sed -E 's/.*Would transfer repository ([^ ]+) to ([^ ]+).*/| \1 | \2 | ✅ Passed |/g' >> validation_results.md || echo "No approved transfers found"
            
            # Extract declined transfers if any
            grep -E "Transfer skipped \(user declined\)" $LATEST_LOG | grep -E -o "([a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+) → ([a-zA-Z0-9_-]+)" | sed -E 's/([^ ]+) → ([^ ]+)/| \1 | \2 | ❌ Declined |/g' >> validation_results.md || echo "No declined transfers found" > /dev/null
            
            echo "" >> validation_results.md
            
            # Add error summary if applicable
            if [ -n "$DRY_RUN_EXIT_CODE" ] && [ $DRY_RUN_EXIT_CODE -ne 0 ]; then
              echo "### ⚠️ Warning" >> validation_results.md
              echo "" >> validation_results.md
              echo "The dry run exited with code $DRY_RUN_EXIT_CODE. Some transfers may not have been validated." >> validation_results.md
              echo "Please check the workflow logs for more details." >> validation_results.md
              echo "" >> validation_results.md
            fi
            
            cat validation_results.md
          else
            echo "::warning::No log file found to analyze. Creating empty validation results."
            echo "## Repository Transfer Validation Results" > validation_results.md
            echo "" >> validation_results.md
            echo "⚠️ No validation data available. The dry run may have failed to generate logs." >> validation_results.md
            echo "" >> validation_results.md
            echo "Please check the workflow logs for more details." >> validation_results.md
          fi
          
          # Always exit with success to prevent blocking PR comments
          exit 0

      - name: Upload validation results
        uses: actions/upload-artifact@v4
        with:
          name: validation-results
          path: validation_results.md
          retention-days: 1

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: repo-transfer-logs
          path: logs/repo_transfer_*_dry_run.log
          retention-days: 7
          
      - name: Create PR Comment with Results
        if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Check for file existence and log status
            console.log('Checking for required files:');
            
            let transferSummary = '';
            if (fs.existsSync('transfer_summary.md')) {
              console.log('✓ Found transfer_summary.md');
              transferSummary = fs.readFileSync('transfer_summary.md', 'utf8');
            } else {
              console.log('✗ transfer_summary.md not found');
              transferSummary = '❌ Error: Transfer summary file not found. This may be due to no changes in transfer_repos.csv.';
            }
            
            let validationResults = '';
            if (fs.existsSync('validation_results.md')) {
              console.log('✓ Found validation_results.md');
              validationResults = fs.readFileSync('validation_results.md', 'utf8');
            } else {
              console.log('✗ validation_results.md not found');
              validationResults = '❌ Error: Validation results file not found. Check workflow logs for details.';
            }
            
            let csvValidation = '';
            if (fs.existsSync('csv_validation.md')) {
              console.log('✓ Found csv_validation.md');
              csvValidation = fs.readFileSync('csv_validation.md', 'utf8');
            } else {
              console.log('✗ csv_validation.md not found');
              csvValidation = '❌ Error: CSV validation file not found.';
            }
            
            // Check for any error patterns in the results
            const hasErrors = 
              validationResults.includes('error') || 
              validationResults.includes('Error') || 
              validationResults.includes('❌') ||
              validationResults.includes('⚠️');
            
            const statusBadge = hasErrors 
              ? '![Validation Status](https://img.shields.io/badge/Validation-Warning-yellow)'
              : '![Validation Status](https://img.shields.io/badge/Validation-Passed-brightgreen)';
            
            const commentBody = '# Repository Transfer Validation\n\n' +
              statusBadge + '\n\n' +
              '## Summary\n' +
              'This PR includes repository transfers that have been validated with a dry-run.\n\n' +
              validationResults + '\n\n' +
              '## Next Steps\n' +
              '1. Review the validation results and dry-run logs\n' +
              '2. If everything looks correct, approve and merge this PR\n' +
              '3. To execute the transfers immediately, comment "apply transfer" on this PR (requires approval)\n\n' +
              'For more details, check the workflow logs and attached artifacts.';
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              console.log('PR comment created successfully');
            } catch (error) {
              console.error('Failed to create PR comment:', error);
              // Don't fail the workflow, but log the error
              core.warning(`Failed to create PR comment: ${error.message}`);
            }
            
  execute-transfer:
    name: Execute Repository Transfer
    if: ${{ github.event_name == 'issue_comment' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check if comment triggers a transfer
        id: check-comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Only run on PRs, not issues
            const isPR = !!context.payload.issue.pull_request;
            if (!isPR) {
              console.log('This comment is on an issue, not a PR. Skipping.');
              return core.setOutput('should_execute', 'false');
            }
            
            // Check if the comment contains the trigger phrase (case insensitive)
            const comment = context.payload.comment.body.toLowerCase();
            const triggerPhrase = 'apply transfer';
            const shouldExecute = comment.includes(triggerPhrase);
            
            if (!shouldExecute) {
              console.log('Comment does not contain the trigger phrase. Skipping.');
              return core.setOutput('should_execute', 'false');
            }
            
            console.log('Comment contains trigger phrase. Proceeding to check PR approval status.');
            core.setOutput('should_execute', 'true');
            core.setOutput('pr_number', context.payload.issue.number);
            
      - name: Check PR approval status
        id: check-approval
        if: steps.check-comment.outputs.should_execute == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.check-comment.outputs.pr_number }};
            
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            // Get the reviews
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            // Check if there's at least one approval
            const hasApproval = reviews.some(review => review.state === 'APPROVED');
            
            if (!hasApproval) {
              console.log('PR does not have any approvals. Skipping transfer execution.');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: '⚠️ **Transfer Execution Blocked**\n\nThis PR needs at least one approval before transfers can be executed. Please request a review and try again after approval.'
              });
              return core.setOutput('can_execute', 'false');
            }
            
            console.log('PR has at least one approval. Proceeding with transfer execution.');
            core.setOutput('can_execute', 'true');
            core.setOutput('branch_name', pr.head.ref);
            
      - name: Checkout code
        if: steps.check-approval.outputs.can_execute == 'true'
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.check-approval.outputs.branch_name }}
          
      - name: Set up Python
        if: steps.check-approval.outputs.can_execute == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        if: steps.check-approval.outputs.can_execute == 'true'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Execute repository transfers
        if: steps.check-approval.outputs.can_execute == 'true'
        id: execute-transfers
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          echo "🚀 EXECUTING ACTUAL REPOSITORY TRANSFERS"
          echo "Transfer initiated by comment on PR #${{ steps.check-comment.outputs.pr_number }}"
          
          # Run the transfer and capture exit code
          python repo_transfer.py --csv transfer_repos.csv --auto-approve --verbose || TRANSFER_EXIT_CODE=$?
          
          # Check if the command succeeded
          if [ -n "$TRANSFER_EXIT_CODE" ] && [ $TRANSFER_EXIT_CODE -ne 0 ]; then
            echo "::error::Transfer execution failed with exit code $TRANSFER_EXIT_CODE"
            echo "transfer_success=false" >> $GITHUB_OUTPUT
          else
            echo "Transfer execution completed successfully"
            echo "transfer_success=true" >> $GITHUB_OUTPUT
          fi
          
          # Find the latest transfer log
          LATEST_LOG=$(ls -t logs/repo_transfer_*.log | grep -v "dry_run" | head -1 || echo "No log file found")
          echo "Latest log file: $LATEST_LOG"
          
          if [ -f "$LATEST_LOG" ]; then
            # Create a summary of transfers for PR comment
            echo "## Repository Transfer Results" > transfer_results.md
            echo "" >> transfer_results.md
            
            # Extract transfer results
            echo "### Transfer Summary" >> transfer_results.md
            echo "" >> transfer_results.md
            echo "| Source | Destination | Status |" >> transfer_results.md
            echo "| ------ | ----------- | ------ |" >> transfer_results.md
            
            # Extract successful transfers
            grep -E "Transfer completed" $LATEST_LOG | grep -v "DEBUG" | grep -E -o "([a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+) → ([a-zA-Z0-9_-]+)" | sed -E 's/([^ ]+) → ([^ ]+)/| \1 | \2 | ✅ Success |/g' >> transfer_results.md || echo "| | | No successful transfers found |" >> transfer_results.md
            
            # Extract failed transfers
            grep -E "Transfer failed" $LATEST_LOG | grep -v "DEBUG" | grep -E -o "([a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+) → ([a-zA-Z0-9_-]+)" | sed -E 's/([^ ]+) → ([^ ]+)/| \1 | \2 | ❌ Failed |/g' >> transfer_results.md || echo "No failed transfers found" > /dev/null
            
            # Extract skipped transfers
            grep -E "Transfer skipped" $LATEST_LOG | grep -v "DEBUG" | grep -E -o "([a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+) → ([a-zA-Z0-9_-]+)" | sed -E 's/([^ ]+) → ([^ ]+)/| \1 | \2 | ⚠️ Skipped |/g' >> transfer_results.md || echo "No skipped transfers found" > /dev/null
            
            echo "" >> transfer_results.md
            
            if [ -n "$TRANSFER_EXIT_CODE" ] && [ $TRANSFER_EXIT_CODE -ne 0 ]; then
              echo "### ⚠️ Warning" >> transfer_results.md
              echo "" >> transfer_results.md
              echo "The transfer process exited with code $TRANSFER_EXIT_CODE. Some transfers may not have completed." >> transfer_results.md
              echo "Please check the workflow logs for more details." >> transfer_results.md
              echo "" >> transfer_results.md
            fi
            
            cat transfer_results.md
          else
            echo "::warning::No log file found to analyze."
            echo "## Repository Transfer Results" > transfer_results.md
            echo "" >> transfer_results.md
            echo "⚠️ No transfer data available. The transfer process may have failed to generate logs." >> transfer_results.md
            echo "" >> transfer_results.md
            echo "Please check the workflow logs for more details." >> transfer_results.md
          fi
          
      - name: Upload execution logs
        if: steps.check-approval.outputs.can_execute == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: transfer-execution-logs
          path: logs/repo_transfer_*.log
          retention-days: 30
          
      - name: Report transfer results
        if: steps.check-approval.outputs.can_execute == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            let transferResults = '';
            if (fs.existsSync('transfer_results.md')) {
              transferResults = fs.readFileSync('transfer_results.md', 'utf8');
            } else {
              transferResults = '❌ Error: Transfer results file not found. Check workflow logs for details.';
            }
            
            const isSuccess = '${{ steps.execute-transfers.outputs.transfer_success }}' === 'true';
            const statusBadge = isSuccess 
              ? '![Transfer Status](https://img.shields.io/badge/Transfer-Completed-brightgreen)'
              : '![Transfer Status](https://img.shields.io/badge/Transfer-Failed-red)';
            
            const commentBody = '# Repository Transfer Execution\n\n' +
              statusBadge + '\n\n' +
              transferResults + '\n\n' +
              '## Execution Details\n' +
              '- Requested by: @' + context.payload.comment.user.login + '\n' +
              '- Execution time: ' + new Date().toISOString() + '\n\n' +
              'For complete details, check the workflow logs and attached artifacts.';
            
            try {
              await github.rest.issues.createComment({
                issue_number: ${{ steps.check-comment.outputs.pr_number }},
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              console.log('PR comment with transfer results created successfully');
            } catch (error) {
              console.error('Failed to create PR comment:', error);
              core.warning(`Failed to create PR comment: ${error.message}`);
            }
